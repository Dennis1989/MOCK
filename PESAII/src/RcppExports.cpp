// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// crossoverC
NumericVector crossoverC(NumericVector parent1, NumericVector parent2);
RcppExport SEXP PESAII_crossoverC(SEXP parent1SEXP, SEXP parent2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type parent1(parent1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parent2(parent2SEXP);
    __result = Rcpp::wrap(crossoverC(parent1, parent2));
    return __result;
END_RCPP
}
// dominatesC
bool dominatesC(NumericVector x, NumericVector y);
RcppExport SEXP PESAII_dominatesC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(dominatesC(x, y));
    return __result;
END_RCPP
}
// nonDominatedSolutionsCimp
NumericMatrix nonDominatedSolutionsCimp(NumericMatrix m);
RcppExport SEXP PESAII_nonDominatedSolutionsCimp(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    __result = Rcpp::wrap(nonDominatedSolutionsCimp(m));
    return __result;
END_RCPP
}
// isNonDominated
bool isNonDominated(Rcpp::List ep, NumericVector sol);
RcppExport SEXP PESAII_isNonDominated(SEXP epSEXP, SEXP solSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::List >::type ep(epSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sol(solSEXP);
    __result = Rcpp::wrap(isNonDominated(ep, sol));
    return __result;
END_RCPP
}
// minVector
NumericVector minVector(NumericVector x, int y);
RcppExport SEXP PESAII_minVector(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    __result = Rcpp::wrap(minVector(x, y));
    return __result;
END_RCPP
}
// applySelectionToNeighbours
NumericVector applySelectionToNeighbours(NumericVector x, NumericMatrix y);
RcppExport SEXP PESAII_applySelectionToNeighbours(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    __result = Rcpp::wrap(applySelectionToNeighbours(x, y));
    return __result;
END_RCPP
}
// mutateCR
Rcpp::NumericVector mutateCR(Rcpp::NumericVector sol, Rcpp::NumericMatrix nn, int L, Rcpp::NumericMatrix neighborhood, Rcpp::NumericVector randomVectorMutation, NumericVector randomVectorSelection);
RcppExport SEXP PESAII_mutateCR(SEXP solSEXP, SEXP nnSEXP, SEXP LSEXP, SEXP neighborhoodSEXP, SEXP randomVectorMutationSEXP, SEXP randomVectorSelectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sol(solSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type neighborhood(neighborhoodSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type randomVectorMutation(randomVectorMutationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type randomVectorSelection(randomVectorSelectionSEXP);
    __result = Rcpp::wrap(mutateCR(sol, nn, L, neighborhood, randomVectorMutation, randomVectorSelection));
    return __result;
END_RCPP
}
// getAssignmentC
IntegerVector getAssignmentC(List grid, int nGrid, NumericMatrix matEP);
RcppExport SEXP PESAII_getAssignmentC(SEXP gridSEXP, SEXP nGridSEXP, SEXP matEPSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type grid(gridSEXP);
    Rcpp::traits::input_parameter< int >::type nGrid(nGridSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type matEP(matEPSEXP);
    __result = Rcpp::wrap(getAssignmentC(grid, nGrid, matEP));
    return __result;
END_RCPP
}
