// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// midpoint
int midpoint(int a, int b);
RcppExport SEXP MOCK_midpoint(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    __result = Rcpp::wrap(midpoint(a, b));
    return __result;
END_RCPP
}
// binSearchC
bool binSearchC(int i, IntegerVector v);
RcppExport SEXP MOCK_binSearchC(SEXP iSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    __result = Rcpp::wrap(binSearchC(i, v));
    return __result;
END_RCPP
}
// connectivity
double connectivity(IntegerVector cluster, IntegerMatrix lNN);
RcppExport SEXP MOCK_connectivity(SEXP clusterSEXP, SEXP lNNSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type lNN(lNNSEXP);
    __result = Rcpp::wrap(connectivity(cluster, lNN));
    return __result;
END_RCPP
}
// crossoverMock
NumericVector crossoverMock(NumericVector parent1, NumericVector parent2);
RcppExport SEXP MOCK_crossoverMock(SEXP parent1SEXP, SEXP parent2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type parent1(parent1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type parent2(parent2SEXP);
    __result = Rcpp::wrap(crossoverMock(parent1, parent2));
    return __result;
END_RCPP
}
// decodeC
IntegerVector decodeC(IntegerVector clusters);
RcppExport SEXP MOCK_decodeC(SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type clusters(clustersSEXP);
    __result = Rcpp::wrap(decodeC(clusters));
    return __result;
END_RCPP
}
// meanVectorOfMatrixC
NumericVector meanVectorOfMatrixC(NumericMatrix m);
RcppExport SEXP MOCK_meanVectorOfMatrixC(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    __result = Rcpp::wrap(meanVectorOfMatrixC(m));
    return __result;
END_RCPP
}
// deviationC
double deviationC(NumericMatrix m);
RcppExport SEXP MOCK_deviationC(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    __result = Rcpp::wrap(deviationC(m));
    return __result;
END_RCPP
}
// dominatesCM
bool dominatesCM(NumericVector x, NumericVector y);
RcppExport SEXP MOCK_dominatesCM(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(dominatesCM(x, y));
    return __result;
END_RCPP
}
// euclideanDistanceC
double euclideanDistanceC(NumericVector x, NumericVector y);
RcppExport SEXP MOCK_euclideanDistanceC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    __result = Rcpp::wrap(euclideanDistanceC(x, y));
    return __result;
END_RCPP
}
// resizeList
List resizeList(List v, int size);
RcppExport SEXP MOCK_resizeList(SEXP vSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(resizeList(v, size));
    return __result;
END_RCPP
}
// whichCList
List whichCList(int x, IntegerVector v);
RcppExport SEXP MOCK_whichCList(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    __result = Rcpp::wrap(whichCList(x, v));
    return __result;
END_RCPP
}
// fastNonDominatedC
List fastNonDominatedC(NumericMatrix m, Function c);
RcppExport SEXP MOCK_fastNonDominatedC(SEXP mSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Function >::type c(cSEXP);
    __result = Rcpp::wrap(fastNonDominatedC(m, c));
    return __result;
END_RCPP
}
// getNeighborhoodMutationMatrixC
NumericMatrix getNeighborhoodMutationMatrixC(IntegerMatrix nearestNeighbors);
RcppExport SEXP MOCK_getNeighborhoodMutationMatrixC(SEXP nearestNeighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerMatrix >::type nearestNeighbors(nearestNeighborsSEXP);
    __result = Rcpp::wrap(getNeighborhoodMutationMatrixC(nearestNeighbors));
    return __result;
END_RCPP
}
// selectRowsOfDatasetC
NumericMatrix selectRowsOfDatasetC(NumericMatrix data, IntegerVector v);
RcppExport SEXP MOCK_selectRowsOfDatasetC(SEXP dataSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    __result = Rcpp::wrap(selectRowsOfDatasetC(data, v));
    return __result;
END_RCPP
}
// mockFunctionC
List mockFunctionC(NumericMatrix data, IntegerVector geneOrClusterVector, IntegerMatrix lNN, bool decoded);
RcppExport SEXP MOCK_mockFunctionC(SEXP dataSEXP, SEXP geneOrClusterVectorSEXP, SEXP lNNSEXP, SEXP decodedSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type geneOrClusterVector(geneOrClusterVectorSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type lNN(lNNSEXP);
    Rcpp::traits::input_parameter< bool >::type decoded(decodedSEXP);
    __result = Rcpp::wrap(mockFunctionC(data, geneOrClusterVector, lNN, decoded));
    return __result;
END_RCPP
}
// mutateC
IntegerVector mutateC(IntegerVector sol, IntegerMatrix nn, NumericMatrix neighborhood, NumericVector randomVectorMutation, IntegerVector randomVectorNeighborSelection);
RcppExport SEXP MOCK_mutateC(SEXP solSEXP, SEXP nnSEXP, SEXP neighborhoodSEXP, SEXP randomVectorMutationSEXP, SEXP randomVectorNeighborSelectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type sol(solSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type neighborhood(neighborhoodSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type randomVectorMutation(randomVectorMutationSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type randomVectorNeighborSelection(randomVectorNeighborSelectionSEXP);
    __result = Rcpp::wrap(mutateC(sol, nn, neighborhood, randomVectorMutation, randomVectorNeighborSelection));
    return __result;
END_RCPP
}
// selectRowsOfDatasetCInteger
IntegerMatrix selectRowsOfDatasetCInteger(IntegerMatrix data, IntegerVector v);
RcppExport SEXP MOCK_selectRowsOfDatasetCInteger(SEXP dataSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    __result = Rcpp::wrap(selectRowsOfDatasetCInteger(data, v));
    return __result;
END_RCPP
}
// tournamentSelectionC
IntegerMatrix tournamentSelectionC(IntegerMatrix pop, int pool_size, IntegerMatrix candidates, Function order);
RcppExport SEXP MOCK_tournamentSelectionC(SEXP popSEXP, SEXP pool_sizeSEXP, SEXP candidatesSEXP, SEXP orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerMatrix >::type pop(popSEXP);
    Rcpp::traits::input_parameter< int >::type pool_size(pool_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type candidates(candidatesSEXP);
    Rcpp::traits::input_parameter< Function >::type order(orderSEXP);
    __result = Rcpp::wrap(tournamentSelectionC(pop, pool_size, candidates, order));
    return __result;
END_RCPP
}
// resizeVector
IntegerVector resizeVector(IntegerVector v, int size);
RcppExport SEXP MOCK_resizeVector(SEXP vSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(resizeVector(v, size));
    return __result;
END_RCPP
}
// whichC
IntegerVector whichC(int x, IntegerVector v);
RcppExport SEXP MOCK_whichC(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type v(vSEXP);
    __result = Rcpp::wrap(whichC(x, v));
    return __result;
END_RCPP
}
