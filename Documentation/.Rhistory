points(10,14)
points(10.6666667,15)
lines(c(10,10.6666667), c(14,15))
points(16,12)
points(19,10)
lines(c(16,19), c(12,10))
points(11,11)
points(15,13)
lines(c(11,15), c(11,13))
d=rbind(c(10,10),c(20,10),c(20,15),c(10,15))
par(mfrow=c(2,1))
plot(1, type="n", xlab="", ylab="", xlim=c(5,25), ylim=c(5, 20))
rect(10,10,20,15)
points(8,11)
points(12,17)
lines(c(8,12), c(11,17))
points(16,12)
points(22,8)
lines(c(16,22), c(12,8))
points(8,8)
points(22,6)
lines(c(8,22), c(8,6))
points(11,11)
points(15,13)
lines(c(11,15), c(11,13))
plot(1, type="n", xlab="", ylab="", xlim=c(5,25), ylim=c(5, 20))
rect(10,10,20,15)
points(10,14)
points(10.6666667,15)
lines(c(10,10.6666667), c(14,15))
points(16,12)
points(19,10)
lines(c(16,19), c(12,10))
points(11,11)
points(15,13)
lines(c(11,15), c(11,13))
evolution(xvector,1,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
fitness
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=minrange, to=maxrange)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,1,-4,4)
yVal = function(x){
x*sin(3*x)+1;
}
evolution(xvector,1,-4,4)
evolution(xvector,1,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
fitness
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,1,-4,4)
evolution(xvector,1,-4,4)
xvector= c(3.17,-1.88,-1.02,0.581,3.27,-2.39,3.19,3.56,1.29,1.03,-3.51,-2.35,-2.59,1.50,-0.93,2.16,-0.02,1.74,3.94,-0.96)
evolution(xvector,1,-4,4)
evolution(xvector,40,-4,4)
evolution(xvector,100,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
mutatedparent = rangemin-1
while (mutatedparent<rangemin || mutatedparent >rangemax)
{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,100,-4,4)
evolution(xvector,100,-4,4)
evolution(xvector,1000,-4,4)
evolution(xvector,1000,-4,4)
evolution(xvector,800,-4,4)
evolution(xvector,100,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
#mutatedparent = rangemin-1
#while (mutatedparent<rangemin || mutatedparent >rangemax)
#{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
# }
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,100,-4,4)
evolution(xvector,600,-4,4)
evolution(xvector,600,-10,4)
evolution(xvector,600,-20,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
mutatedparent = rangemin-4
while (mutatedparent<rangemin || mutatedparent >rangemax)
{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,600,-20,4)
evolution(xvector,600,-4,4)
sample=sample(xvec,size=2,prob=fitness)
xvec=xvector
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
fitness= sapply(xvec,f)
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
yvec=y(xvec,yVal)
yvec=sapply(xvec,yVal)
fitness= sapply(xvec,f)
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
mutatedparent = rangemin-4
rangemin=-4
rangemax=4
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
evolution(xvector,600,-4,4)
evolution(xvector,600,-4,4)
evolution(xvector,600,-4,4)
evolution(xvector,100,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((round(x*sin(3*x)+1-min(yvec),1))/(sum)))
fitness= sapply(xvec,f)
mutatedparent = rangemin-4
while (mutatedparent<rangemin || mutatedparent >rangemax)
{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
xvector= c(3.17,-1.88,-1.02,0.581,3.27,-2.39,3.19,3.56,1.29,1.03,-3.51,-2.35,-2.59,1.50,-0.93,2.16,-0.02,1.74,3.94,-0.96)
evolution(xvector,100,-4,4)
evolution(xvector,700,-4,4)
evolution(xvector,700,-4,4)
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((x*sin(3*x)+1-min(yvec),1))/(sum))
fitness= sapply(xvec,f)
mutatedparent = rangemin-4
while (mutatedparent<rangemin || mutatedparent >rangemax)
{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,700,-4,4)
xvector= c(3.17,-1.88,-1.02,0.581,3.27,-2.39,3.19,3.56,1.29,1.03,-3.51,-2.35,-2.59,1.50,-0.93,2.16,-0.02,1.74,3.94,-0.96)
xvec=xvector
yVal = function(x){
x*sin(3*x)+1;
}
rangemin=-4
rangemax=4
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((x*sin(3*x)+1-min(yvec),1))/(sum))
fitness= sapply(xvec,f)
sample=sample(xvec,size=2,prob=fitness)
fitness= sapply(xvec,f)
f <- function(x) (((x*sin(3*x)+1-min(yvec),1))/(sum))
f <- function(x) (((x*sin(3*x)+1-min(yvec)))/(sum))
fitness= sapply(xvec,f)
sample=sample(xvec,size=2,prob=fitness)
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution = function(xvec,n,rangemin,rangemax)
{
for(i in 1:n){
yvec=sapply(xvec,yVal)
#Normalizing because of negative values
normalizedyvec=sapply(yvec,function(x) x-min(yvec))
sum = sum(normalizedyvec)
oldpoints=xvec
## curve(x*sin(3*x)+1, from=-10, to=4)
##points(xvec,sapply(xvec,yVal))
#fitness probability
f <- function(x) (((x*sin(3*x)+1-min(yvec)))/(sum))
fitness= sapply(xvec,f)
mutatedparent = rangemin-4
while (mutatedparent<rangemin || mutatedparent >rangemax)
{
#generate new child with probability
sample=sample(xvec,size=2,prob=fitness)
#recombination with mean
recombination = mean(sample)
#mutation with normal dist
mutation= rnorm(1)
mutatedparent=recombination+mutation
}
xvec=c(xvec,mutatedparent)
#delete lowest parent or new child
minindex = which.min(yvec)
xvec=xvec[-minindex]
}
curve(x*sin(3*x)+1, from=rangemin, to=rangemax)
points(oldpoints,sapply(oldpoints,yVal))
points(sample,sapply(sample,yVal), col="red", pch=16)
points(recombination,yVal(recombination), col="green", pch=15)
points(mutatedparent,yVal(mutatedparent),col="blue",pch=15)
}
evolution(xvector,700,-4,4)
evolution(xvector,1000,-4,4)
evolution(xvector,10,-4,4)
evolution(xvector,20,-4,4)
evolution(xvector,30,-4,4)
evolution(xvector,40,-4,4)
evolution(xvector,50,-4,4)
evolution(xvector,60,-4,4)
evolution(xvector,70,-4,4)
evolution(xvector,80,-4,4)
evolution(xvector,90,-4,4)
evolution(xvector,100,-4,4)
evolution(xvector,500,-4,4)
evolution(xvector,3000,-4,4)
evolution(xvector,3000,-4,4)
evolution(xvector,3000,-4,4)
evolution(xvector,3000,-4,4)
evolution(xvector,1000,-4,4)
evolution(xvector,30,-4,4)
one = matrix(
c(1, 0, 0.1, 0, 1, 0,0,0,1),
nrow=3,
ncol=3,
byrow = TRUE)
two = matrix(
c(66, -66, -1, 66, 66, 0,0,0,1),
nrow=3,
ncol=3,
byrow = TRUE)
one%*%two
bla = matrix(c(1,2,3,4)2,2)
bla
bla = matrix(c(1,2,3,4),2,2)
bla
bla - rowMeans(bla)
rowMeans(bla)
zdt1
(0.3*-1.1)+0.3*-0.1+0.9*0.4
minimumSpanningTree
minimumSpanningTree = initializeMST(distanceMatrix)
distanceMatrix = dist(data)
clusterData = r15
require(microbenchmark)
require(igraph)
require(RANN)
require(ggplot2)
require(profvis) #devtools::install_github("rstudio/profvis") , requires digest package
require(mlbench)
clusterData = r15
r15 = read.csv("data\\R15.txt",sep="\t")[,1:2]
r15 = read.csv("data\\R15.txt",sep="\t")[,1:2]
require(microbenchmark)
require(igraph)
require(RANN)
require(ggplot2)
require(profvis) #devtools::install_github("rstudio/profvis") , requires digest package
require(mlbench)
getwd()
setwd('C:/Users/Dennis Assenmacher/Documents/MOCK-PESA-II/Documentation')
Sys.setenv(TEXINPUTS=getwd(),
BIBINPUTS=getwd(),
BSTINPUTS=getwd())
getwd()
